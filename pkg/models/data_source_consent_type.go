// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataSourceConsentType Consent type given to the data source.
//
// swagger:model dataSourceConsentType
type DataSourceConsentType string

const (

	// DataSourceConsentTypeNone captures enum value "none"
	DataSourceConsentTypeNone DataSourceConsentType = "none"

	// DataSourceConsentTypeBroad captures enum value "broad"
	DataSourceConsentTypeBroad DataSourceConsentType = "broad"

	// DataSourceConsentTypeSpecific captures enum value "specific"
	DataSourceConsentTypeSpecific DataSourceConsentType = "specific"

	// DataSourceConsentTypeUnknown captures enum value "unknown"
	DataSourceConsentTypeUnknown DataSourceConsentType = "unknown"
)

// for schema
var dataSourceConsentTypeEnum []interface{}

func init() {
	var res []DataSourceConsentType
	if err := json.Unmarshal([]byte(`["none","broad","specific","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceConsentTypeEnum = append(dataSourceConsentTypeEnum, v)
	}
}

func (m DataSourceConsentType) validateDataSourceConsentTypeEnum(path, location string, value DataSourceConsentType) error {
	if err := validate.EnumCase(path, location, value, dataSourceConsentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this data source consent type
func (m DataSourceConsentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataSourceConsentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
